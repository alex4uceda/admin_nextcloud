#!/bin/bash

# Script completo para generar certificados SSL y reiniciar servicios
# Este script automatiza todo el proceso de generaci√≥n e instalaci√≥n

set -e

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}=================================================${NC}"
echo -e "${BLUE}  Setup Completo de Certificados SSL${NC}"
echo -e "${BLUE}  Nextcloud con Docker Compose${NC}"
echo -e "${BLUE}=================================================${NC}"
echo ""

# Verificar que estamos en el directorio correcto
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}Error: No se encontr√≥ docker-compose.yml. Ejecuta este script desde el directorio del proyecto.${NC}"
    exit 1
fi

echo -e "${BLUE}Paso 1:${NC} Generando certificados SSL autofirmados..."
./generate-ssl-certs.sh

echo ""
echo -e "${BLUE}Paso 2:${NC} Reiniciando servicios Docker..."

# Verificar si los contenedores est√°n ejecut√°ndose
if docker compose ps | grep -q "Up"; then
    echo "  ‚Üª Reiniciando nginx-proxy para cargar nuevos certificados..."
    docker compose restart nginx-proxy
    
    echo "  ‚è≥ Esperando que nginx-proxy se reinicie..."
    sleep 5
    
    # Verificar que nginx-proxy est√© ejecut√°ndose
    if docker compose ps nginx-proxy | grep -q "Up"; then
        echo -e "  ${GREEN}‚úÖ nginx-proxy reiniciado exitosamente${NC}"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  nginx-proxy no est√° ejecut√°ndose. Iniciando servicios...${NC}"
        docker compose up -d
    fi
else
    echo "  üöÄ Los servicios no est√°n ejecut√°ndose. Iniciando stack completo..."
    docker compose up -d
fi

echo ""
echo -e "${BLUE}Paso 3:${NC} Verificando servicios..."

# Esperar un momento para que los servicios se inicien
sleep 5

# Verificar servicios
echo "  üîç Estado de los servicios:"
docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo -e "${BLUE}Paso 4:${NC} Verificaci√≥n de SSL..."

# Funci√≥n para verificar SSL
verify_ssl() {
    local domain=$1
    echo -n "  üîê Verificando $domain... "
    
    if curl -k -s --connect-timeout 5 "https://$domain" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ OK${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No disponible${NC}"
    fi
}

# Verificar dominios
verify_ssl "nextcloud.net"
verify_ssl "www.nextcloud.net"

echo ""
echo -e "${GREEN}=================================================${NC}"
echo -e "${GREEN}  üéâ SETUP COMPLETADO EXITOSAMENTE${NC}"
echo -e "${GREEN}=================================================${NC}"
echo ""
echo -e "${BLUE}Accesos disponibles:${NC}"
echo "  üåê https://nextcloud.net"
echo "  üåê https://www.nextcloud.net"
echo "  üåê https://*.nextcloud.net (cualquier subdominio)"
echo ""
echo -e "${YELLOW}Notas importantes:${NC}"
echo "  ‚Ä¢ Los certificados son autofirmados (tu navegador mostrar√° advertencia)"
echo "  ‚Ä¢ Para eliminar advertencias, instala el certificado en tu sistema"
echo "  ‚Ä¢ Los certificados tienen validez de 10 a√±os"
echo ""
echo -e "${BLUE}Comandos √∫tiles:${NC}"
echo "  ‚Ä¢ Ver logs de nginx: ${YELLOW}docker compose logs nginx-proxy${NC}"
echo "  ‚Ä¢ Reiniciar servicios: ${YELLOW}docker compose restart${NC}"
echo "  ‚Ä¢ Ver certificado: ${YELLOW}openssl x509 -in swag-config/etc/letsencrypt/live/nextcloud.net/fullchain.pem -text -noout${NC}"
echo ""
echo -e "${GREEN}¬°Disfruta tu Nextcloud con SSL! üöÄ${NC}"