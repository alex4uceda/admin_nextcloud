services:
  db:
    image: mariadb:10.11
    container_name: nextcloud-db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    environment:
      - MARIADB_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MYSQL_DATABASE}
      - MARIADB_USER=${MYSQL_USER}
      - MARIADB_PASSWORD=${MYSQL_PASSWORD}
      - TZ=America/El_Salvador
    volumes:
      - ./db:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -p${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - proxy_net

  redis:
    image: redis:7-alpine
    container_name: nextcloud-redis
    restart: unless-stopped
    command: >
      sh -c '
      if [ -n "$REDIS_PASSWORD" ]; then
        exec redis-server --appendonly yes --requirepass "$REDIS_PASSWORD";
      else
        exec redis-server --appendonly yes;
      fi'
    environment:
      - TZ=America/El_Salvador
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./redis:/data
    healthcheck:
      # Use CMD-SHELL so we can honor a possible REDIS_PASSWORD inside the container
      test: ["CMD-SHELL", "if [ -n \"$REDIS_PASSWORD\" ]; then redis-cli -a \"$REDIS_PASSWORD\" ping; else redis-cli ping; fi"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
        - proxy_net

  nextcloud:
    image: nextcloud:apache
    container_name: nextcloud-app
    restart: unless-stopped
    #ports:
    #  - "${NEXTCLOUD_HTTP_PORT}:80"
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=${REDIS_PASSWORD}
      - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT}
      - PHP_UPLOAD_LIMIT=${PHP_UPLOAD_LIMIT}
      - TZ=${TZ}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_TRUSTED_DOMAINS}
      - OVERWRITEHOST=${OVERWRITEHOST}
      - OVERWRITEPROTOCOL=${OVERWRITEPROTOCOL}
    volumes:
      - ./nextcloud:/var/www/html
      - ./nextcloud_data:/var/www/html/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
      - /bin/sh
      - -lc
      - |
        echo "ServerName localhost" > /etc/apache2/conf-available/servername.conf
        a2enconf servername
        exec apache2-foreground
    networks:
      - proxy_net

  #______________________________
  #   Reverse Proxy Service
  nginx-proxy:
    build:
      context: ./proxy-nginx
      dockerfile: DockerFile
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      #- "443:443"
    volumes:
      - ./proxy-nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./swag-config/etc/letsencrypt/live/nextcloud.net:/etc/nginx/certs/nextcloud.net:ro
    depends_on:
      #- letsencrypt
      - nextcloud
    networks:
      - proxy_net


  #letsencrypt:
  #  image: lscr.io/linuxserver/swag:latest
  #  container_name: swag-letsencrypt
  #  restart: unless-stopped
  #  cap_add:
  #    - NET_ADMIN
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/El_Salvador
  #    - URL=nextcloud.net
  #    - SUBDOMAINS=wildcard           # SWAG usa esta ruta: /config/etc/letsencrypt/live/nextcloud.net/
  #    - VALIDATION=dns                # se ignora si ya existen los .pem en la ruta esperada
  #    - DNSPLUGIN=cloudflare
  #    - EMAIL=admin@nextcloud.net
  #    - STAGING=true                  # certificados de prueba (si en algún momento intentara ACME)
  #  volumes:
  #    - ./swag-config:/config         # <— MONTA TODO /config
  #  networks:
  #    - proxy_net
  #  ports:
  #    - "443:443"                     # recuerda exponer 443 si será reverse proxy       


networks:
  proxy_net:
    external: true